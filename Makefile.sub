# -*- Makefile -*-

# Here is a sample Makefile for Linux taken from https://leanpub.com/ESP8266_ESP32

# TODO: Retrofit this back into ./Makefile somehow but see if the esp-open-sdk has provision for building firmware

PROJ_NAME=test1
COMPORT=/dev/ttyUSB0
OBJS=user_main.o uart.o
#
CC=xtensa-lx106-elf-gcc
OBJS=user_main.o uart.o
APP=a.out
ESPTOOL_CK=esptool
CCFLAGS= -Wimplicit-function-declaration -fno-inline-functions -mlongcalls -mtext-section-literals \
-mno-serialize-volatile -I$(ESP8266_SDK_ROOT)/include -I. -D__ETS__ -DICACHE_FLASH -DXTENSA -DUSE_US_TIMER

LDFLAGS=-nostdlib \
-L$(ESP8266_SDK_ROOT)/lib -L$(ESP8266_SDK_ROOT)/ld -T$(ESP8266_SDK_ROOT)/ld/eagle.app.v6.ld \
-Wl,--no-check-sections -u call_user_start -Wl,-static -Wl,--start-group \
-lc -lgcc -lhal -lphy -lpp -lnet80211 -llwip -lwpa -lmain -ljson -lupgrade -lssl \
-lpwm -lsmartconfig -Wl,--end-group

all: $(PROJ_NAME)_0x00000.bin $(PROJ_NAME)_0x40000.bin

a.out: $(OBJS)
       $(CC) -o a.out $(LDFLAGS) $(OBJS)

$(PROJ_NAME)_0x00000.bin: a.out
	$(ESPTOOL_CK) -eo $< -bo $@ -bs .text -bs .data -bs .rodata -bs .iram0.text -bc -ec || true

$(PROJ_NAME)_0x40000.bin: a.out
	$(ESPTOOL_CK) -eo $< -es .irom0.text $@ -ec || true

.c.o:
	$(CC) $(CCFLAGS) -c $<

clean:
	rm -f a.out *.o *.bin

flash: all
	$(ESPTOOL_CK) -cp $(COMPORT) -cd nodemcu -cb 115200 -ca 0x00000 -cf $(PROJ_NAME)_0x00000.bin
	$(ESPTOOL_CK) -cp $(COMPORT) -cd nodemcu -cb 115200 -ca 0x40000 -cf $(PROJ_NAME)_0x40000.bin
